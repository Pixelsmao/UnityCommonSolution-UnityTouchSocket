<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocketPro.Modbus</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.Modbus.BooleanDataPartition">
            <summary>
            存储布尔类型的数据区
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.BooleanDataPartition.#ctor(System.Int32,System.Boolean[])">
            <summary>
            存储布尔类型的数据区
            </summary>
            <param name="startingAddress"></param>
            <param name="values"></param>
        </member>
        <member name="M:TouchSocket.Modbus.BooleanDataPartition.#ctor(System.Int32,System.Int32)">
            <summary>
            存储布尔类型的数据区
            </summary>
            <param name="startingAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:TouchSocket.Modbus.BooleanDataPartition.Read(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.BooleanDataPartition.Write(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.BooleanDataPartition.Write(System.Int32,System.Boolean[])">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.DataPartition`1">
            <summary>
            数据区
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TouchSocket.Modbus.DataPartition`1.#ctor(System.Int32,`0[])">
            <summary>
            初始化一个数据区
            </summary>
            <param name="startingAddress"></param>
            <param name="values"></param>
        </member>
        <member name="P:TouchSocket.Modbus.DataPartition`1.LockSlim">
            <summary>
            读写锁
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.DataPartition`1.StartingAddress">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.DataPartition`1.Values">
            <summary>
            值
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.DataPartition`1.Quantity">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.DataPartition`1.Read(System.Int32,System.Int32)">
            <summary>
            读取
            </summary>
            <param name="startingAddress"></param>
            <param name="quantity"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Modbus.DataPartition`1.Write(System.Int32,`0)">
            <summary>
            写入单个数据
            </summary>
            <param name="startingAddress"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Modbus.DataPartition`1.Write(System.Int32,`0[])">
            <summary>
            写入多个数据
            </summary>
            <param name="startingAddress"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusDataLocater">
            <summary>
            Modbus数据定位器
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusDataLocater.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            初始化一个数据定位器
            </summary>
            <param name="coilsQuantity"></param>
            <param name="discreteInputsQuantity"></param>
            <param name="holdingRegistersQuantity"></param>
            <param name="inputRegistersQuantity"></param>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusDataLocater.#ctor">
            <summary>
            初始化一个数据定位器
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusDataLocater.Coils">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusDataLocater.DiscreteInputs">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusDataLocater.HoldingRegisters">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusDataLocater.InputRegisters">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusDataLocater.ExecuteAsync(TouchSocket.Modbus.IModbusRequest)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusResult">
            <summary>
            ModbusResult
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusResult.#ctor(System.Byte[],TouchSocket.Modbus.ModbusErrorCode)">
            <summary>
            ModbusResult
            </summary>
            <param name="data"></param>
            <param name="errorCode"></param>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusResult.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusResult.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.ShortDataPartition">
            <summary>
            存储short类型的数据区
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ShortDataPartition.#ctor(System.Int32,System.Int16[])">
            <summary>
            存储short类型的数据区
            </summary>
            <param name="startingAddress"></param>
            <param name="values"></param>
        </member>
        <member name="M:TouchSocket.Modbus.ShortDataPartition.#ctor(System.Int32,System.Int32)">
            <summary>
            存储short类型的数据区
            </summary>
            <param name="startingAddress"></param>
            <param name="quantity"></param>
        </member>
        <member name="M:TouchSocket.Modbus.ShortDataPartition.Read(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ShortDataPartition.Write(System.Int32,System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ShortDataPartition.Write(System.Int32,System.Int16[])">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusRtuOverTcpSlave">
            <summary>
            基于Tcp协议，且使用Rtu数据的丛站接口
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusRtuOverTcpSlave.ModbusDataLocater">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusRtuOverTcpSlave.NewClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusRtuOverTcpSlaveSessionClient">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusRtuOverTcpSlaveSessionClient.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusRtuOverUdpSlave">
            <summary>
            基于Udp协议，且使用Rtu数据格式的从站接口
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusRtuOverUdpSlave.ModbusDataLocater">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusRtuOverUdpSlave.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusRtuSlave">
            <summary>
            基于串口的Modbus从站
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusRtuSlave.ModbusDataLocater">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusRtuSlave.OnSerialConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusTcpSlave">
            <summary>
            基于Tcp的Modbus从站接口
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusTcpSlave.ModbusDataLocater">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusTcpSlave.NewClient">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusTcpSlaveSessionClient">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusTcpSlaveSessionClient.OnTcpConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusUdpSlave">
            <summary>
            基于Udp协议的Modbus从站
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusUdpSlave.ModbusDataLocater">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusUdpSlave.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusSlaveExecutedEventArgs">
            <summary>
            ModbusSlaveExecutedEventArgs
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusSlaveExecutedEventArgs.#ctor(TouchSocket.Sockets.IDependencyClient,TouchSocket.Modbus.IModbusResponse,TouchSocket.Sockets.Protocol,TouchSocket.Modbus.IModbusRequest)">
            <summary>
            ModbusSlaveExecutedEventArgs
            </summary>
            <param name="client"></param>
            <param name="response"></param>
            <param name="protocol"></param>
            <param name="request"></param>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutedEventArgs.Client">
            <summary>
            用于实际通讯的通讯器
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutedEventArgs.Response">
            <summary>
            响应结果
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutedEventArgs.Protocol">
            <summary>
            协议类型
            <para>
            请使用<see cref="T:TouchSocket.Modbus.TouchSocketModbusUtility"/>的静态成员做对比。例如：<see cref="F:TouchSocket.Modbus.TouchSocketModbusUtility.ModbusTcp"/>
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutedEventArgs.Request">
            <summary>
            Modbus请求
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusSlaveExecutingEventArgs">
            <summary>
            ModbusSlaveExecutingEventArgs
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusSlaveExecutingEventArgs.#ctor(TouchSocket.Modbus.IModbusRequest,TouchSocket.Sockets.Protocol,TouchSocket.Sockets.IDependencyClient)">
            <summary>
            ModbusSlaveExecutingEventArgs
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutingEventArgs.Client">
            <summary>
            用于实际通讯的通讯器
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutingEventArgs.ErrorCode">
            <summary>
            当<see cref="P:TouchSocket.Core.PermitEventArgs.IsPermitOperation"/>为false时，可以返回设定的错误码。
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutingEventArgs.Protocol">
            <summary>
            协议类型
            <para>
            请使用<see cref="T:TouchSocket.Modbus.TouchSocketModbusUtility"/>的静态成员做对比。例如：<see cref="F:TouchSocket.Modbus.TouchSocketModbusUtility.ModbusTcp"/>
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlaveExecutingEventArgs.Request">
            <summary>
            Modbus请求
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusDataLocaterExtension">
            <summary>
            ModbusDataLocaterExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusDataLocaterExtension.CreateDataLocaterMaster(TouchSocket.Modbus.IModbusDataLocater)">
            <summary>
            创建一个本地可以直接读写<see cref="T:TouchSocket.Modbus.IModbusDataLocater"/>的主站。
            </summary>
            <param name="modbusDataLocater"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusMasterProExtension">
            <summary>
            ModbusMasterProExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusMasterProExtension.CreateModbusObject``1(TouchSocket.Modbus.IModbusMaster)">
            <summary>
            创建一个Modbus对象类型。
            </summary>
            <typeparam name="TModbusObject"></typeparam>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusProContainerExtension">
            <summary>
            ModbusProContainerExtension
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusProPluginsManagerExtension">
            <summary>
            ModbusProPluginsManagerExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusProPluginsManagerExtension.AddModbusSlavePoint(TouchSocket.Core.IPluginManager)">
            <summary>
            添加一个Modbus站点
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusSlaveExtension">
            <summary>
            ModbusSlaveExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusSlaveExtension.GetSlavePointBySlaveId(TouchSocket.Modbus.IModbusSlave,System.Byte)">
            <summary>
            通过站号获取实际站点。
            </summary>
            <param name="modbusSlave"></param>
            <param name="slaveId"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusSlavePointExtension">
            <summary>
            ModbusSlavePointExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusSlavePointExtension.SetModbusDataLocater``1(``0,TouchSocket.Modbus.IModbusDataLocater)">
            <summary>
            设置Modbus数据定位器
            </summary>
            <param name="modbusSlavePoint"></param>
            <param name="modbusDataLocater"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusSlavePointExtension.SetSlaveId``1(``0,System.Byte)">
            <summary>
            设置站号
            </summary>
            <typeparam name="TModbusSlavePoint"></typeparam>
            <param name="modbusSlavePoint"></param>
            <param name="slaveId"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusSlavePointExtension.UseIgnoreSlaveId``1(``0)">
            <summary>
            忽略站号验证
            </summary>
            <typeparam name="TModbusSlavePoint"></typeparam>
            <param name="modbusSlavePoint"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.IDataLocaterMaster">
            <summary>
            Modbus本地访问主站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusDataLocater">
            <summary>
            Modbus数据定位器接口
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusDataLocater.Coils">
            <summary>
            线圈
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusDataLocater.DiscreteInputs">
            <summary>
            离散输入
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusDataLocater.HoldingRegisters">
            <summary>
            保持寄存器
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusDataLocater.InputRegisters">
            <summary>
            输入寄存器
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.IModbusDataLocater.ExecuteAsync(TouchSocket.Modbus.IModbusRequest)">
            <summary>
            异步执行Modbus请求
            </summary>
            <param name="modbusRequest"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusRtuOverTcpSlave">
            <summary>
            基于Tcp协议，且使用Rtu数据的丛站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusRtuOverUdpSlave">
            <summary>
            基于Udp协议，且使用Rtu数据格式的从站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusRtuSlave">
            <summary>
            基于串口的Modbus从站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusSlave">
            <summary>
            Modbus从站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusSlavePoint">
            <summary>
            Modbus从站站点
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusSlavePoint.ModbusDataLocater">
            <summary>
            Modbus数据定位器
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusSlavePoint.SlaveId">
            <summary>
            站号
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.IModbusSlavePoint.IgnoreSlaveId">
            <summary>
            是否忽略站号
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusTcpSlave">
            <summary>
            基于Tcp的Modbus从站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusUdpSlave">
            <summary>
            基于Udp协议的Modbus从站接口
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusObject">
            <summary>
            Modbus对象抽象类
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusObject.Master">
            <summary>
            实际通讯的Modbus客户端
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusObject.SetValueArray``1(``0[],System.String)">
            <summary>
            设置数组值
            </summary>
            <typeparam name="TValue">数组中元素的类型，必须是非托管类型</typeparam>
            <param name="values">要设置的值数组</param>
            <param name="propertyName">调用此方法的属性名称，默认为调用者的名称</param>
            <exception cref="T:System.ArgumentException">当属性名称为空或null时抛出</exception>
            <exception cref="T:System.Exception">当属性未被识别时抛出</exception>
            <exception cref="T:System.InvalidOperationException">当属性类型与赋值类型不匹配时抛出</exception>
            <exception cref="T:System.NotSupportedException">当尝试对只读数据区进行写操作时抛出</exception>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusObject.SetValue``1(``0,System.String)">
            <summary>
            设置单个值
            </summary>
            <typeparam name="TValue">值的类型，必须是非托管类型</typeparam>
            <param name="value">要设置的值</param>
            <param name="propertyName">调用此方法的属性名称，默认为调用者的名称</param>
            <exception cref="T:System.ArgumentException">当属性名称为空或null时抛出</exception>
            <exception cref="T:System.Exception">当属性未被识别时抛出</exception>
            <exception cref="T:System.InvalidOperationException">当属性类型与赋值类型不匹配时抛出</exception>
            <exception cref="T:System.NotSupportedException">当尝试对只读数据区进行写操作时抛出</exception>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusObject.GetValue``1(System.String)">
            <summary>
            获取单个值
            </summary>
            <typeparam name="TValue">值的类型，必须是非托管类型</typeparam>
            <param name="propertyName">调用此方法的属性名称，默认为调用者的名称</param>
            <returns>返回获取的值</returns>
            <exception cref="T:System.ArgumentException">当属性名称为空或null时抛出</exception>
            <exception cref="T:System.Exception">当属性未被识别时抛出</exception>
            <exception cref="T:System.NotSupportedException">当尝试对不支持的操作类型进行操作时抛出</exception>
        </member>
        <member name="M:TouchSocket.Modbus.ModbusObject.GetValueArray``1(System.String)">
            <summary>
             获取值数组
             </summary>
             <typeparam name="TValue">数组中元素的类型，必须是非托管类型</typeparam>
             <param name="propertyName">调用此方法的属性名称，默认为调用者的名称</param>
             <returns>返回获取的值数组</returns>
             <exception cref="T:System.ArgumentException">当属性名称为空或null时抛出</exception>
             <exception cref="T:System.Exception">当属性未被识别时抛出</exception>
             <exception cref="T:System.NotSupportedException">当尝试对不支持的操作类型进行操作时抛出</exception>
        </member>
        <member name="T:TouchSocket.Modbus.ModbusPropertyAttribute">
            <summary>
            Modbus属性特性
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusPropertyAttribute.SlaveId">
            <summary>
            站号，默认1
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusPropertyAttribute.Timeout">
            <summary>
            超时时间，默认1000ms
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusPropertyAttribute.Partition">
            <summary>
            存储区
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusPropertyAttribute.EndianType">
            <summary>
            端序
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusPropertyAttribute.StartAddress">
            <summary>
            起始位置
            </summary>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusPropertyAttribute.Quantity">
             <summary>
             数组成员数量。
            
             <para>
             该属性仅在数组属性时生效。且表述的是数组成员数量。而非寄存器数量。例如当属性是int32[]，Quantity=5时，表示会操作5个int32的值，即10个寄存器。
             </para>
             </summary>
        </member>
        <member name="T:TouchSocket.Modbus.Partition">
            <summary>
            Modbus存储区
            </summary>
        </member>
        <member name="F:TouchSocket.Modbus.Partition.Coils">
            <summary>
            线圈存储区
            </summary>
        </member>
        <member name="F:TouchSocket.Modbus.Partition.DiscreteInputs">
            <summary>
            离散输入存储区
            </summary>
        </member>
        <member name="F:TouchSocket.Modbus.Partition.HoldingRegisters">
            <summary>
            保持寄存器存储区
            </summary>
        </member>
        <member name="F:TouchSocket.Modbus.Partition.InputRegisters">
            <summary>
            输入寄存器存储区
            </summary>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusSlaveExecutedPlugin">
            <summary>
            表示一个Modbus从站执行插件接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)">
            <summary>
            当从站执行请求之后调用。
            </summary>
            <param name="sender">发送者。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="T:TouchSocket.Modbus.IModbusSlaveExecutingPlugin">
            <summary>
            定义一个Modbus从站执行插件接口。
            </summary>
        </member>
        <member name="M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)">
            <summary>
            当从站执行请求之前触发。
            </summary>
            <param name="sender">发送者。</param>
            <param name="e">事件参数。</param>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlavePoint.IgnoreSlaveId">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlavePoint.ModbusDataLocater">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Modbus.ModbusSlavePoint.SlaveId">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.Modbus.IModbusSlaveExecutedPlugin"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions.AddModbusSlaveExecutedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions.AddModbusSlaveExecutedPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.Modbus.IModbusSlavePoint})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions.AddModbusSlaveExecutedPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions.AddModbusSlaveExecutedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Modbus.ModbusSlaveExecutedEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions.AddModbusSlaveExecutedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Modbus.IModbusSlavePoint,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutedPluginExtensions.AddModbusSlaveExecutedPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutedPlugin.OnModbusSlaveExecuted(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutedEventArgs)"/>
        </member>
        <member name="T:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.Modbus.IModbusSlaveExecutingPlugin"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions.AddModbusSlaveExecutingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions.AddModbusSlaveExecutingPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.Modbus.IModbusSlavePoint})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions.AddModbusSlaveExecutingPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions.AddModbusSlaveExecutingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Modbus.ModbusSlaveExecutingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions.AddModbusSlaveExecutingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Modbus.IModbusSlavePoint,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.Modbus._ModbusSlaveExecutingPluginExtensions.AddModbusSlaveExecutingPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.Modbus.IModbusSlaveExecutingPlugin.OnModbusSlaveExecuting(TouchSocket.Modbus.IModbusSlavePoint,TouchSocket.Modbus.ModbusSlaveExecutingEventArgs)"/>
        </member>
        <member name="T:TouchSocket.Core.FastSerializableAttribute">
            <summary>
            标识源生成Fast序列化相关的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.GeneratorPackageAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.PackageMemberAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>成员的特性。
            </summary>
        </member>
        <member name="P:TouchSocket.Core.PackageMemberAttribute.Behavior">
            <summary>
            生成行为。一般来说，对于非只读、非重写、且同时拥有get，set（可以私有）访问器的属性，会自动生成。
            对于字段，均不会自动生成。所以可以使用该设置，来指示生成器的生成行为。
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
