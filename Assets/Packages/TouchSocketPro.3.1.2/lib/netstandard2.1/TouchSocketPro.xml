<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocketPro</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.Core.AuthorizedHelper">
            <summary>
            AuthorizedHelper
            </summary>
        </member>
        <member name="M:TouchSocket.Core.AuthorizedHelper.U32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="T:TouchSocket.Core.Enterprise">
            <summary>
            企业版
            </summary>
        </member>
        <member name="P:TouchSocket.Core.Enterprise.LicenceKey">
            <summary>
            许可密钥
            </summary>
        </member>
        <member name="P:TouchSocket.Core.Enterprise.LicenceInfo">
            <summary>
            许可证信息
            </summary>
        </member>
        <member name="P:TouchSocket.Core.Enterprise.LicenceOwner">
            <summary>
            密钥归属
            </summary>
        </member>
        <member name="M:TouchSocket.Core.Enterprise.ForTest">
            <summary>
            请求测试企业版功能。
            <para>该方法在被调用后，会抛出可控异常，如果坚持使用企业版，请Try拦截即可。</para>
            <para>目前企业版功能暂时免费。并且在后续的使用中，只要您使用的是免费版本，则会一直免费。</para>
            <para>如果想再次使用，请结束进程，重新启动即可。</para>
            </summary>
            <exception cref="T:System.Exception">如果坚持使用企业版，请Try拦截即可。</exception>
        </member>
        <member name="T:TouchSocket.Core.EnterpriseEditionAttribute">
            <summary>
            标识为企业版功能
            </summary>
        </member>
        <member name="P:TouchSocket.Core.EnterpriseEditionAttribute.LicenceInfo">
            <summary>
            许可证信息
            </summary>
        </member>
        <member name="P:TouchSocket.Core.EnterpriseEditionAttribute.LicenceOwner">
            <summary>
            密钥归属
            </summary>
        </member>
        <member name="P:TouchSocket.Core.EnterpriseEditionAttribute.U32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="M:TouchSocket.Core.EnterpriseEditionAttribute.Inspection">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="T:TouchSocket.Core.LicenceKeyInvalidException">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:TouchSocket.Core.LicenceKeyInvalidException.i">
            <summary>
            7ashd7ashd7ashdahsd77
            </summary>
        </member>
        <member name="M:TouchSocket.Core.LicenceKeyInvalidException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:TouchSocket.Core.LicenceKeyInvalidException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:TouchSocket.Core.LicenceKeyInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="T:TouchSocket.Core.T32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            此u32u4234u234u5u88ds8sd8hjjrs8djhc
            </summary>
        </member>
        <member name="T:TouchSocket.Core.SocketProPluginManagerExtension">
            <summary>
            SocketProPluginManagerExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Core.SocketProPluginManagerExtension.UseTLV(TouchSocket.Core.IPluginManager)">
            <summary>
            使用TLV三元组格式。
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Core.FastSerializableAttribute">
            <summary>
            标识源生成Fast序列化相关的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.GeneratorPackageAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.PackageMemberAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>成员的特性。
            </summary>
        </member>
        <member name="P:TouchSocket.Core.PackageMemberAttribute.Behavior">
            <summary>
            生成行为。一般来说，对于非只读、非重写、且同时拥有get，set（可以私有）访问器的属性，会自动生成。
            对于字段，均不会自动生成。所以可以使用该设置，来指示生成器的生成行为。
            </summary>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketProResource">
            <summary>
            TouchSocketPro资源枚举
            </summary>
        </member>
        <member name="F:TouchSocket.Resources.TouchSocketProResource.LicenceKeyInvalid">
            <summary>
            授权密钥无效，程序将在5秒后退出。请检查密钥，或者不使用企业版功能。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.ITLVDataFrame">
            <summary>
            ITLVDataFrame
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITLVDataFrame.Length">
            <summary>
            <see cref="P:TouchSocket.Sockets.ITLVDataFrame.Value"/>的有效长度
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITLVDataFrame.Tag">
            <summary>
            Tag标识
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.ITLVDataFrame.Value">
            <summary>
            有效载荷值
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ITLVDataFrame.Build(TouchSocket.Core.FixedHeaderType,TouchSocket.Core.ByteBlock)">
            <summary>
            构建数据
            </summary>
            <param name="lengthType"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:TouchSocket.Sockets.TLVClientExtensions">
            <summary>
            TLVClientExtensions
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVClientExtensions.CloseWithTLV(TouchSocket.Sockets.ITcpSession,System.String)">
            <summary>
            使用TLV格式关闭TCP会话
            </summary>
            <param name="client">要关闭的TCP会话客户端</param>
            <param name="msg">关闭连接时可选的消息</param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVClientExtensions.CloseWithTLVAsync(TouchSocket.Sockets.ITcpSession,System.String)">
            <summary>
            发送TLV的Close报文，然后关闭当前客户端
            </summary>
            <param name="client"></param>
            <param name="msg"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVClientExtensions.PingWithTLV(TouchSocket.Sockets.ITcpSession,System.Int32)">
            <summary>
            发送Tag为Ping的报文，然后等待Pong回应。
            <para>当适配器不是<see cref="T:TouchSocket.Sockets.TLVDataHandlingAdapter"/>时，会抛出异常。</para>
            </summary>
            <param name="client"></param>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:TouchSocket.Sockets.TLVDataFrame">
            <summary>
            TLVDataFrame
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.CloseTag">
            <summary>
            Close
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.PingTag">
            <summary>
            Ping
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.PongTag">
            <summary>
            Pong
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.Ping">
            <summary>
            Ping数据。Tag=0。
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVDataFrame.Pong">
            <summary>
            Pong数据。Tag=1。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.#ctor">
            <summary>
            初始化一个Ushort的TLVRequestInfo对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.#ctor(System.UInt16)">
            <summary>
            初始化一个TLVRequestInfo对象。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.#ctor(System.UInt16,System.Byte[])">
            <summary>
            初始化一个TLVRequestInfo对象。
            </summary>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.TouchSocket#Core#IFixedHeaderRequestInfo#BodyLength">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.Length">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.Tag">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataFrame.Value">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.AppendValue(System.Byte[],System.Int32,System.Int32)">
             <summary>
            追加Value。
             </summary>
             <param name="buffer"></param>
             <param name="offset"></param>
             <param name="length"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.AppendValue(System.Byte[])">
            <summary>
            追加Value。
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.Build(TouchSocket.Core.FixedHeaderType,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
            <param name="lengthType"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.ClearValue">
            <summary>
            清除所有Value的值
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.TouchSocket#Core#IFixedHeaderRequestInfo#OnParsingBody(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrame.TouchSocket#Core#IFixedHeaderRequestInfo#OnParsingHeader(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.TLVDataFrameExtensions">
            <summary>
            TLVDataFrameExtensions
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrameExtensions.GetValueString(TouchSocket.Sockets.ITLVDataFrame)">
            <summary>
            获取utf-8编码的由<see cref="P:TouchSocket.Sockets.ITLVDataFrame.Value"/>转义的字符串。
            </summary>
            <param name="requestInfo"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataFrameExtensions.BuildAsBytes(TouchSocket.Sockets.ITLVDataFrame,TouchSocket.Core.FixedHeaderType)">
            <summary>
            构建为对应字节组
            </summary>
            <param name="requestInfo"></param>
            <param name="lengthType"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.TLVDataHandlingAdapter">
            <summary>
            TLVDataHandlingAdapter.
            <para>数据格式如下：
            <list type="bullet">
            <item>Tag，ushort类型，大端序</item>
            <item>Length，byte/ushort/int32类型，大端序</item>
            <item>Value，byte[]类型</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.#ctor(TouchSocket.Core.FixedHeaderType,System.Func{TouchSocket.Sockets.TLVDataFrame,System.Boolean})">
            <summary>
            初始化一个TLV适配器。
            </summary>
            <para>数据格式如下：
            <list type="bullet">
            <item>Tag，ushort类型，大端序</item>
            <item>Length，byte/ushort/int32类型，大端序</item>
            <item>Value，byte[]类型</item>
            </list>
            </para>
            <param name="lengthType"></param>
            <param name="verifyFunc"></param>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataHandlingAdapter.CanSendRequestInfo">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataHandlingAdapter.HeaderLength">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.TLVDataHandlingAdapter.LengthType">
            <summary>
            表述Value可容纳的最大字节数。
            <see cref="F:TouchSocket.Core.FixedHeaderType.Byte"/>为255字节
            <see cref="F:TouchSocket.Core.FixedHeaderType.Ushort"/>为65535字节
            <see cref="F:TouchSocket.Core.FixedHeaderType.Int"/>为2147483647字节。该值会再次由MaxPackageSize限制。
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.GetInstance">
            <inheritdoc/>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.OnReceivingSuccess(TouchSocket.Sockets.TLVDataFrame)">
            <inheritdoc/>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVDataHandlingAdapter.PreviewSendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.TLVPlugin">
            <summary>
            TLV插件
            </summary>
        </member>
        <member name="F:TouchSocket.Sockets.TLVPlugin.m_lengthType">
            <summary>
            TLV插件
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.#ctor">
            <summary>
            TLV插件
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.OnLoadingConfig(TouchSocket.Core.IConfigObject,TouchSocket.Core.ConfigEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.OnTcpReceived(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.SetLengthType(TouchSocket.Core.FixedHeaderType)">
            <summary>
            设置Value的长度类型。
            </summary>
            <param name="lengthType"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Sockets.TLVPlugin.SetVerifyFunc(System.Func{TouchSocket.Sockets.TLVDataFrame,System.Boolean})">
            <summary>
            设置校验方法。
            </summary>
            <param name="verifyFunc"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.ValueTLVDataFrame">
            <summary>
            以1个字节表示Length的TLV
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.#ctor(System.UInt16,System.Byte[])">
            <summary>
            初始化一个TLVRequestInfo对象。
            </summary>
            <param name="tag"></param>
            <param name="value"></param>
        </member>
        <member name="P:TouchSocket.Sockets.ValueTLVDataFrame.Length">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.ValueTLVDataFrame.Tag">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.Sockets.ValueTLVDataFrame.Value">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.AppendValue(System.Byte[],System.Int32,System.Int32)">
             <summary>
            追加Value。
             </summary>
             <param name="buffer"></param>
             <param name="offset"></param>
             <param name="length"></param>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.AppendValue(System.Byte[])">
            <summary>
            追加Value。
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.Build(TouchSocket.Core.FixedHeaderType,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
            <param name="lengthType"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:TouchSocket.Sockets.ValueTLVDataFrame.ClearValue">
            <summary>
            清除所有Value的值
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
