<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket.JsonRpc</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.JsonRpc.JsonRpcAttribute">
            <summary>
            适用于JsonRpc的标记
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcAttribute.#ctor(System.Boolean)">
            <summary>
             适用于JsonRpc的标记.
             <para>是否仅以函数名调用，当为True是，调用时仅需要传入方法名即可。</para>
            </summary>
            <param name="methodInvoke"></param>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcAttribute.#ctor">
            <summary>
            适用于JsonRpc的标记
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcAttribute.#ctor(System.String)">
            <summary>
            适用于JsonRpc的标记.
            </summary>
            <param name="invokenKey"></param>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcAttribute.GetGenericConstraintTypes">
            <inheritdoc/>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcBase">
            <summary>
            表示 JSON-RPC 消息的基类。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcBase.Id">
            <summary>
            获取或设置 JSON-RPC 消息的标识符。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcBase.Jsonrpc">
            <summary>
            获取或设置 JSON-RPC 版本。
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcCallContextBase">
            <summary>
            JsonRpc调用上下文
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcCallContextBase.JsonRpcId">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcCallContextBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcWaitResult">
            <summary>
            表示一个等待结果的JsonRpc类。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcWaitResult.ErrorCode">
            <summary>
            获取或设置错误代码。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcWaitResult.ErrorMessage">
            <summary>
            获取或设置错误消息。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcWaitResult.Message">
            <summary>
            获取或设置消息。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcWaitResult.Result">
            <summary>
            获取或设置结果。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcWaitResult.Sign">
            <summary>
            获取或设置标识。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcWaitResult.Status">
            <summary>
            获取或设置状态。
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.HttpJsonRpcClient">
            <summary>
            表示一个HTTP JSON-RPC客户端。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcClient.#ctor">
            <summary>
            初始化 <see cref="T:TouchSocket.JsonRpc.HttpJsonRpcClient"/> 类的新实例。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.HttpJsonRpcClient.SerializerConverter">
            <summary>
            获取序列化转换器。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步连接到服务器。
            </summary>
            <param name="millisecondsTimeout">超时时间（毫秒）。</param>
            <param name="token">取消令牌。</param>
            <returns>表示异步操作的任务。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcClient.InvokeAsync(System.String,System.Type,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            异步调用远程方法。
            </summary>
            <param name="invokeKey">调用键。</param>
            <param name="returnType">返回类型。</param>
            <param name="invokeOption">调用选项。</param>
            <param name="parameters">参数。</param>
            <returns>表示异步操作的任务，包含调用结果。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcClient.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <summary>
            加载配置。
            </summary>
            <param name="config">配置。</param>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcActor">
            <summary>
            表示一个JsonRpcActor类，用于处理JsonRpc请求和响应。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.ActionMap">
            <summary>
            获取或设置动作映射。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.Encoding">
            <summary>
            获取或设置编码。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.Logger">
            <summary>
            获取或设置日志记录器。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.Resolver">
            <summary>
            获取或设置解析器。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.RpcDispatcher">
            <summary>
            获取或设置RPC调度器。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.SendAction">
            <summary>
            获取或设置发送动作。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcActor.SerializerConverter">
            <summary>
            获取或设置序列化转换器。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.AddRpcToMap(TouchSocket.Rpc.IRpcServerProvider,TouchSocket.Rpc.ActionMap)">
            <summary>
            将RPC添加到映射中。
            </summary>
            <param name="rpcServerProvider">RPC服务器提供者。</param>
            <param name="actionMap">动作映射。</param>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.InputReceiveAsync(System.ReadOnlyMemory{System.Byte},TouchSocket.JsonRpc.JsonRpcCallContextBase)">
            <summary>
            异步接收输入。
            </summary>
            <param name="memory">输入内存。</param>
            <param name="callContext">调用上下文。</param>
            <returns>任务。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.InvokeAsync(System.String,System.Type,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <summary>
            异步调用。
            </summary>
            <param name="invokeKey">调用键。</param>
            <param name="returnType">返回类型。</param>
            <param name="invokeOption">调用选项。</param>
            <param name="parameters">参数。</param>
            <returns>任务对象。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.SetRpcServerProvider(TouchSocket.Rpc.IRpcServerProvider)">
            <summary>
            设置RPC服务器提供者。
            </summary>
            <param name="rpcServerProvider">RPC服务器提供者。</param>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.SetRpcServerProvider(TouchSocket.Rpc.IRpcServerProvider,TouchSocket.Rpc.ActionMap)">
            <summary>
            设置RPC服务器提供者和动作映射。
            </summary>
            <param name="rpcServerProvider">RPC服务器提供者。</param>
            <param name="actionMap">动作映射。</param>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.GetJsonRpcError(TouchSocket.Rpc.InvokeResult)">
            <summary>
            获取JsonRpc错误。
            </summary>
            <param name="invokeResult">调用结果。</param>
            <returns>JsonRpc错误。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.BuildJsonRpcRequest(TouchSocket.JsonRpc.InternalJsonRpcRequest)">
            <summary>
            构建JsonRpc请求。
            </summary>
            <param name="jsonRpcRequest">JsonRpc请求。</param>
            <returns>Json字符串。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.BuildRequestContext(TouchSocket.JsonRpc.JsonRpcCallContextBase,TouchSocket.JsonRpc.InternalJsonRpcRequest)">
            <summary>
            构建请求上下文。
            </summary>
            <param name="callContext">调用上下文。</param>
            <param name="jsonRpcRequest">JsonRpc请求。</param>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.ResponseAsync(TouchSocket.JsonRpc.JsonRpcCallContextBase,System.Object,TouchSocket.JsonRpc.JsonRpcActor.JsonRpcError)">
            <summary>
            异步响应。
            </summary>
            <param name="callContext">调用上下文。</param>
            <param name="result">结果。</param>
            <param name="error">错误。</param>
            <returns>任务。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.ResultParseToType(System.String,System.Type)">
            <summary>
            结果解析为类型。
            </summary>
            <param name="result">结果。</param>
            <param name="returnType">返回类型。</param>
            <returns>解析后的对象。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.ThisInvokeAsync(System.Object)">
            <summary>
            异步调用。
            </summary>
            <param name="obj">对象。</param>
            <returns>任务。</returns>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcActor.JsonRpcError">
            <summary>
            JsonRpc错误。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.TryParseRequest(System.String,TouchSocket.JsonRpc.InternalJsonRpcRequest@)">
            <summary>
            尝试解析请求。
            </summary>
            <param name="str">字符串。</param>
            <param name="request">请求。</param>
            <returns>是否成功。</returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcActor.TryParseResponse(System.String,TouchSocket.JsonRpc.JsonRpcWaitResult@)">
            <summary>
            尝试解析响应。
            </summary>
            <param name="str">字符串。</param>
            <param name="response">响应。</param>
            <returns>是否成功。</returns>
        </member>
        <member name="T:TouchSocket.JsonRpc.TcpJsonRpcClient">
            <summary>
            表示一个TCP JsonRpc客户端。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcClient.#ctor">
            <summary>
            初始化 <see cref="T:TouchSocket.JsonRpc.TcpJsonRpcClient"/> 类的新实例。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.TcpJsonRpcClient.ActionMap">
            <summary>
            获取JsonRpc的调用键。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.TcpJsonRpcClient.SerializerConverter">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcClient.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcClient.InvokeAsync(System.String,System.Type,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcClient.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcClient.OnTcpReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.JsonRpc.WebSocketJsonRpcClient">
            <summary>
            基于WebSocket协议的JsonRpc客户端。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcClient.#ctor">
            <summary>
            初始化 <see cref="T:TouchSocket.JsonRpc.WebSocketJsonRpcClient"/> 类的新实例。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.WebSocketJsonRpcClient.ActionMap">
            <summary>
            JsonRpc的调用键。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.WebSocketJsonRpcClient.SerializerConverter">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcClient.InvokeAsync(System.String,System.Type,TouchSocket.Rpc.IInvokeOption,System.Object[])">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcClient.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcClient.LoadConfig(TouchSocket.Core.TouchSocketConfig)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcClient.OnReceived(System.Net.WebSockets.WebSocketReceiveResult,TouchSocket.Core.ByteBlock)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcClientExtension">
            <summary>
            JsonRpcClientExtension
            </summary>
        </member>
        <member name="F:TouchSocket.JsonRpc.JsonRpcClientExtension.JsonRpcActorProperty">
            <summary>
            JsonRpcActorProperty
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcClientExtension.GetJsonRpcActionClient(TouchSocket.Sockets.ISessionClient)">
            <summary>
            获取基于会话内部的双工JsonRpc端
            </summary>
            <param name="sessionClient"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcClientExtension.UseSystemTextJson``1(``0,System.Action{System.Text.Json.JsonSerializerOptions})">
            <summary>
            使用System.Text.Json进行序列化
            </summary>
            <param name="jsonRpcClient"></param>
            <param name="options"></param>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcParserPluginExtension">
            <summary>
            提供JsonRpcParserPlugin的扩展方法。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcParserPluginExtension.UseSystemTextJson``1(``0,System.Action{System.Text.Json.JsonSerializerOptions})">
            <summary>
            使用System.Text.Json进行序列化
            </summary>
            <param name="jsonRpcParserPlugin">JsonRpcParserPlugin实例。</param>
            <param name="options">配置JsonSerializer的选项。</param>
            <typeparam name="TJsonRpcParserPlugin">JsonRpcParserPlugin的类型。</typeparam>
            <returns>配置后的JsonRpcParserPlugin实例。</returns>
        </member>
        <member name="T:TouchSocket.JsonRpc.IHttpJsonRpcCallContext">
            <summary>
            IHttpJsonRpcCallContext
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.IHttpJsonRpcClient">
            <summary>
            IHttpJsonRpcClient
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.IHttpJsonRpcClientSlim">
            <summary>
            IHttpJsonRpcClientSlim
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.IJsonRpcCallContext">
            <summary>
            IJsonRpcCallContext
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.IJsonRpcClient">
            <summary>
            IJsonRpcClient
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.IJsonRpcClient.SerializerConverter">
            <summary>
            获取用于 JSON-RPC 的序列化转换器。
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.IJsonRpcRequestInfo">
            <summary>
            当使用自定义适配器时，则可以自定义数据来源。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.IJsonRpcRequestInfo.GetJsonRpcString">
            <summary>
            获取JsonRpc数据源。
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.IJsonRpcRequestInfo.GetJsonRpcMemory">
            <summary>
            获取JsonRpc数据源的内存表示形式。
            </summary>
            <returns>JsonRpc数据源的只读内存。</returns>
        </member>
        <member name="T:TouchSocket.JsonRpc.ITcpJsonRpcCallContext">
            <summary>
            ITcpJsonRpcCallContext
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.ITcpJsonRpcClient">
            <summary>
            基于Tcp协议的JsonRpc客户端。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.ITcpJsonRpcClient.ActionMap">
            <summary>
            获取ActionMap。
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.IWebSocketJsonRpcClient">
            <summary>
            表示一个WebSocket Json RPC客户端接口。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.IWebSocketJsonRpcClient.ActionMap">
            <summary>
            获取或设置动作映射。
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext">
            <summary>
            TouchSocketJsonRpcSourceGenerationContext
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TouchSocketJsonRpcSourceGenerationContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin">
            <summary>
            HttpJsonRpcParserPlugin
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin.#ctor(TouchSocket.Rpc.IRpcServerProvider)">
            <summary>
            构造函数，用于初始化 <see cref="T:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin"/> 类的新实例。
            </summary>
            <param name="rpcServerProvider">IRpcServerProvider 类型的参数，提供 RPC 服务器服务。</param>
            <remarks>
            该构造函数调用基类的构造函数，传递 <paramref name="rpcServerProvider"/>参数。
            这对于确保基类能够访问 RPC 服务器提供者和依赖项解析器至关重要。
            </remarks>
        </member>
        <member name="P:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin.JsonRpcUrl">
            <summary>
            当挂载在<see cref="T:TouchSocket.Http.HttpService"/>时，匹配Url然后响应。当设置为null或空时，会全部响应。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin.OnHttpRequest(TouchSocket.Http.IHttpSessionClient,TouchSocket.Http.HttpContextEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin.SetJsonRpcUrl(System.String)">
            <summary>
            设置JSON-RPC URL的匹配规则。
            当挂载在<see cref="T:TouchSocket.Http.HttpService"/>时，根据指定的URL进行匹配并响应请求。
            如果设置为null或空，将对所有请求进行响应。
            </summary>
            <param name="jsonRpcUrl">要匹配的JSON-RPC URL。</param>
            <returns>返回当前的<see cref="T:TouchSocket.JsonRpc.HttpJsonRpcParserPlugin"/>实例，支持链式调用。</returns>
        </member>
        <member name="T:TouchSocket.JsonRpc.JsonRpcParserPluginBase">
            <summary>
            JsonRpcParser解析器插件
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcParserPluginBase.RpcServerProvider">
            <summary>
            获取RPC服务器提供程序。
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcParserPluginBase.ActionMap">
            <summary>
            获取动作映射。
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.JsonRpcParserPluginBase.#ctor(TouchSocket.Rpc.IRpcServerProvider)">
            <summary>
            初始化 <see cref="T:TouchSocket.JsonRpc.JsonRpcParserPluginBase"/> 类的新实例。
            </summary>
            <param name="rpcServerProvider">RPC服务器提供程序。</param>
        </member>
        <member name="P:TouchSocket.JsonRpc.JsonRpcParserPluginBase.SerializerConverter">
            <summary>
            获取序列化转换器。
            </summary>
        </member>
        <member name="T:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin">
            <summary>
            基于Tcp协议的JsonRpc功能插件
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.#ctor(TouchSocket.Rpc.IRpcServerProvider)">
            <summary>
            基于Tcp协议的JsonRpc功能插件
            </summary>
            <param name="rpcServerProvider"></param>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.SetAllowJsonRpc(System.Func{TouchSocket.Sockets.ITcpSession,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            经过判断是否标识当前的客户端为JsonRpc
            </summary>
            <param name="allowJsonRpc"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.SetAllowJsonRpc(System.Func{TouchSocket.Sockets.ITcpSession,System.Boolean})">
            <summary>
            经过判断是否标识当前的客户端为JsonRpc
            </summary>
            <param name="allowJsonRpc"></param>
            <returns></returns>
        </member>
        <member name="P:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.AllowJsonRpc">
            <summary>
            经过判断是否标识当前的客户端为JsonRpc
            </summary>
        </member>
        <member name="P:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.AutoSwitch">
            <summary>
            自动转换协议
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.NoSwitchProtocol">
            <summary>
            不需要自动转化协议。
            <para>仅当服务器是Tcp时生效。才会解释为jsonRpc。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.OnTcpConnected(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ConnectedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.TcpJsonRpcParserPlugin.OnTcpReceived(TouchSocket.Sockets.ITcpSession,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin">
            <summary>
            WebSocketJsonRpcParserPlugin
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin.#ctor(TouchSocket.Rpc.IRpcServerProvider)">
            <summary>
            WebSocketJsonRpcParserPlugin
            </summary>
            <param name="rpcServerProvider"></param>
        </member>
        <member name="P:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin.AllowJsonRpc">
            <summary>
            经过判断是否标识当前的客户端为JsonRpc
            </summary>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin.OnWebSocketHandshaked(TouchSocket.Http.WebSockets.IWebSocket,TouchSocket.Http.HttpContextEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin.OnWebSocketReceived(TouchSocket.Http.WebSockets.IWebSocket,TouchSocket.Http.WebSockets.WSDataFrameEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin.SetAllowJsonRpc(System.Func{TouchSocket.Http.WebSockets.IWebSocket,TouchSocket.Http.HttpContext,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            经过判断是否标识当前的客户端为JsonRpc
            </summary>
            <param name="allowJsonRpc"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.JsonRpc.WebSocketJsonRpcParserPlugin.SetAllowJsonRpc(System.Func{TouchSocket.Http.WebSockets.IWebSocket,TouchSocket.Http.HttpContext,System.Boolean})">
            <summary>
            经过判断是否标识当前的客户端为JsonRpc
            </summary>
            <param name="allowJsonRpc"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Sockets.JsonRpcConfigExtension">
            <summary>
            JsonRpcConfigExtension
            </summary>
        </member>
        <member name="T:TouchSocket.Core.JsonRpcPluginManagerExtension">
            <summary>
            JsonRpcPluginManagerExtension
            </summary>
        </member>
        <member name="M:TouchSocket.Core.JsonRpcPluginManagerExtension.UseTcpJsonRpc(TouchSocket.Core.IPluginManager)">
            <summary>
            使用基于Tcp协议的JsonRpc的插件。仅服务器有用。
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Core.JsonRpcPluginManagerExtension.UseHttpJsonRpc(TouchSocket.Core.IPluginManager)">
            <summary>
            使用基于Http协议的JsonRpc的插件。仅服务器有用。
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.Core.JsonRpcPluginManagerExtension.UseWebSocketJsonRpc(TouchSocket.Core.IPluginManager)">
            <summary>
            使用基于WebSocket协议的JsonRpc的插件。仅服务器有用。
            </summary>
            <param name="pluginManager"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.Core.FastSerializableAttribute">
            <summary>
            标识源生成Fast序列化相关的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.GeneratorPackageAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.PackageMemberAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>成员的特性。
            </summary>
        </member>
        <member name="P:TouchSocket.Core.PackageMemberAttribute.Behavior">
            <summary>
            生成行为。一般来说，对于非只读、非重写、且同时拥有get，set（可以私有）访问器的属性，会自动生成。
            对于字段，均不会自动生成。所以可以使用该设置，来指示生成器的生成行为。
            </summary>
        </member>
        <member name="T:TouchSocket.Resources.TouchSocketJsonRpcResource">
            <summary>
            TouchSocketJsonRpc资源枚举
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
