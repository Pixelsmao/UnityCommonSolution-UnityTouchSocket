<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TouchSocket.SerialPorts</name>
    </assembly>
    <members>
        <member name="T:TouchSocket.SerialPorts.SerialOperationResult">
            <summary>
            串行操作结果的结构体。
            用于封装一次串行操作（如读取）的结果，包括传输的字节数和操作类型。
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialOperationResult.BytesTransferred">
            <summary>
            已传输的字节数。
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialOperationResult.EventType">
            <summary>
            串行数据事件类型。
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialOperationResult.#ctor(System.Int32,System.IO.Ports.SerialData)">
            <summary>
            初始化<see cref="T:TouchSocket.SerialPorts.SerialOperationResult"/>结构体的实例。
            </summary>
            <param name="bytesToRead">要读取的字节数。</param>
            <param name="eventType">串行数据事件类型。</param>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortOption">
            <summary>
            串口配置
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.BaudRate">
            <summary>
            波特率
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.DataBits">
            <summary>
            数据位
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.Parity">
            <summary>
            校验位
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.PortName">
            <summary>
            COM
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.StopBits">
            <summary>
            停止位
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.Handshake">
            <inheritdoc cref = "P:System.IO.Ports.SerialPort.Handshake" />
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.DtrEnable">
            <inheritdoc cref = "P:System.IO.Ports.SerialPort.DtrEnable" />
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortOption.RtsEnable">
            <inheritdoc cref = "P:System.IO.Ports.SerialPort.RtsEnable" />
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortOption.ToString">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortUtility">
            <summary>
            SerialPortUtility
            </summary>
        </member>
        <member name="F:TouchSocket.SerialPorts.SerialPortUtility.SerialPort">
            <summary>
            SerialPort
            </summary>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialCore">
            <summary>
            Serial核心
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialCore.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Serial核心
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialCore.MaxBufferSize">
            <summary>
            最大缓存尺寸
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialCore.MinBufferSize">
            <summary>
            最小缓存尺寸
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialCore.ReceiveBufferSize">
            <summary>
            接收缓存池,运行时的值会根据流速自动调整
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialCore.ReceiveCounter">
            <summary>
            接收计数器
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialCore.SendBufferSize">
            <summary>
            发送缓存池,运行时的值会根据流速自动调整
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialCore.SendCounter">
            <summary>
            发送计数器
            </summary>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortClient">
            <inheritdoc cref="T:TouchSocket.SerialPorts.SerialPortClientBase"/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClient.MainSerialPort">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClient.Closed">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClient.Closing">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClient.Connected">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClient.Connecting">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClient.Received">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.OnSerialClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            断开连接。在客户端未设置连接状态时，不会触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.OnSerialClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.OnSerialConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            已经建立连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.OnSerialConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            准备连接的时候，此时并未建立连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.OnSerialReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.ClearReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.CreateReceiver">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.SendAsync(System.ReadOnlyMemory{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.SendAsync(TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClient.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortClientBase">
            <summary>
            串口客户端基类
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.#ctor">
            <summary>
            串口客户端基类
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialClosed(TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            断开连接。在客户端未设置连接状态时，不会触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialClosing(TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialConnected(TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            已经建立连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialConnecting(TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            准备连接的时候，此时并未建立连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialReceived(TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当收到适配器处理的数据时。
            </summary>
            <param name="e"></param>
            <returns>如果返回<see langword="true"/>则表示数据已被处理，且不会再向下传递。</returns>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialReceiving(TouchSocket.Core.ByteBlock)">
            <summary>
            当收到原始数据时
            </summary>
            <param name="byteBlock">包含接收数据的字节块</param>
            <returns>
            如果返回<see langword="true"/>则表示数据已被处理，且不会再向下传递。
            返回<see langword="false"/>则表示数据未被处理，可能会继续向下传递。
            </returns>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.OnSerialSending(System.ReadOnlyMemory{System.Byte})">
            <summary>
            在序列化发送前调用的虚拟方法。
            </summary>
            <param name="memory">待发送的字节序列。</param>
            <returns>一个表示操作结果的<see cref="T:System.Threading.Tasks.ValueTask`1"/>，始终返回 true。</returns>
            <remarks>
            此方法的存在是为了提供一个扩展点，允许在序列化数据发送之前进行自定义处理。
            默认实现直接返回 true，表示默认情况下允许序列化发送继续进行。
            </remarks>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.IsClient">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.LastReceivedTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.LastSentTime">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.Online">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.Protocol">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedDataHandlingAdapter">
            <inheritdoc/>
        </member>
        <member name="P:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedMainSerialPort">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.CloseAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ConnectAsync(System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.Abort(System.Boolean,System.String)">
            <summary>
            中止连接方法
            </summary>
            <param name="manual">是否为手动断开连接</param>
            <param name="msg">断开连接的原因</param>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.SetAdapter(TouchSocket.Core.SingleStreamDataHandlingAdapter)">
            <summary>
            设置数据处理适配器。
            </summary>
            <param name="adapter">要设置的适配器实例。</param>
            <exception cref="T:System.ArgumentNullException">如果提供的适配器实例为null，则抛出此异常。</exception>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedClearReceiver">
            <summary>
            清除接收器对象
            </summary>
            <remarks>
            将内部接收器对象置为null，以释放资源或重置状态
            </remarks>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedCreateReceiver(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IReceiverResult})">
            <summary>
            创建或获取一个接收器对象。
            </summary>
            <param name="receiverObject">接收器客户端对象，用于接收操作结果。</param>
            <returns>返回一个实现了IReceiver&lt;IReceiverResult&gt;接口的接收器对象。</returns>
            <remarks>
            这个方法使用了空条件运算符（??=）来实现懒加载，即只有当m_receiver为null时才会创建一个新的InternalReceiver对象。
            这样做可以提高性能，因为无需频繁地创建接收器实例。
            </remarks>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedDefaultSendAsync(System.ReadOnlyMemory{System.Byte})">
            <summary>
            异步发送数据，保护方法。
            </summary>
            <param name="memory">待发送的字节数据内存。</param>
            <returns>异步任务。</returns>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedSendAsync(System.ReadOnlyMemory{System.Byte}@)">
            <summary>
            异步发送数据，通过适配器模式灵活处理数据发送。
            </summary>
            <param name="memory">待发送的只读字节内存块。</param>
            <returns>一个异步任务，表示发送操作。</returns>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedSendAsync(TouchSocket.Core.IRequestInfo@)">
             <summary>
             异步发送请求信息的受保护方法。
            
             此方法首先检查当前对象是否能够发送请求信息，如果不能，则抛出异常。
             如果可以发送，它将使用数据处理适配器来异步发送输入请求。
             </summary>
             <param name="requestInfo">要发送的请求信息。</param>
             <returns>返回一个任务，该任务代表异步操作的结果。</returns>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortClientBase.ProtectedSendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
            <summary>
            异步发送数据。
            如果数据处理适配器不存在或无法拼接发送，则将所有传输字节合并到一个连续的内存块中发送。
            如果数据处理适配器存在且支持拼接发送，则直接发送传输字节列表。
            </summary>
            <param name="transferBytes">要发送的字节数据列表，每个项代表一个字节片段。</param>
            <returns>发送任务。</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortConfigExtension">
            <summary>
            SerialPortConfigExtension
            </summary>
        </member>
        <member name="F:TouchSocket.SerialPorts.SerialPortConfigExtension.SerialDataHandlingAdapterProperty">
            <summary>
            设置串口适配器
            </summary>
        </member>
        <member name="F:TouchSocket.SerialPorts.SerialPortConfigExtension.SerialPortOptionProperty">
            <summary>
            串口属性。
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortConfigExtension.SetSerialDataHandlingAdapter(TouchSocket.Core.TouchSocketConfig,System.Func{TouchSocket.Core.SingleStreamDataHandlingAdapter})">
            <summary>
            设置(串口系)数据处理适配器。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortConfigExtension.SetSerialPortOption(TouchSocket.Core.TouchSocketConfig,TouchSocket.SerialPorts.SerialPortOption)">
            <summary>
            设置串口属性。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortExtensions">
            <summary>
            SerialPortExtensions
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortExtensions.TryClose(System.IO.Ports.SerialPort)">
            <summary>
            尝试关闭<see cref="T:System.IO.Ports.SerialPort"/>。不会抛出异常。
            </summary>
            <param name="serialPort"></param>
        </member>
        <member name="T:TouchSocket.SerialPorts.SerialPortPluginManagerExtension">
            <summary>
            提供扩展方法以支持串口插件管理功能。
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.SerialPortPluginManagerExtension.UseSerialPortSessionCheckClear(TouchSocket.Core.IPluginManager)">
            <summary>
            使用<see cref="T:TouchSocket.SerialPorts.ISerialPortSession"/>检查连接客户端活性插件。
            <para>当在设置的周期内，没有接收/发送任何数据，则判定该客户端掉线。执行清理。默认配置：60秒为一个周期，同时检测发送和接收。</para>
            服务器、客户端均适用。
            </summary>
            <param name="pluginManager">插件管理器对象，用于管理插件。</param>
            <returns>返回一个<see cref="T:TouchSocket.Sockets.CheckClearPlugin`1"/>类型的插件实例，用于执行客户端活性检查及清理操作。</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.WaitingClientExtension">
            <summary>
            提供扩展方法以简化创建等待客户端的代码。
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.WaitingClientExtension.CreateWaitingClient(TouchSocket.SerialPorts.ISerialPortClient,TouchSocket.Sockets.WaitingOptions)">
            <summary>
            创建一个等待客户端，用于处理串口通信中的接收操作。
            </summary>
            <param name="client">发起请求的串口客户端。</param>
            <param name="waitingOptions">等待选项，配置等待行为。</param>
            <returns>返回一个具备特定等待行为的串口客户端实例。</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialPortClient">
            <summary>
            串口客户端接口。
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.ISerialPortClient.Connected">
            <summary>
            成功打开串口
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.ISerialPortClient.Connecting">
            <summary>
            准备连接串口的时候
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.ISerialPortClient.Closed">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.ISerialPortClient.Closing">
            <summary>
            即将断开连接(仅主动断开时有效)。
            <para>
            </para>
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.ISerialPortClient.MainSerialPort">
            <summary>
            主通信器
            </summary>
        </member>
        <member name="P:TouchSocket.SerialPorts.ISerialPortClient.Received">
            <summary>
            接收到数据
            </summary>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialPortSession">
            <summary>
            定义了一个串行端口会话接口，继承自多个与客户端、插件、配置、在线状态、连接状态和关闭操作相关的接口。
            </summary>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialClosedPlugin">
            <summary>
            定义一个串口关闭插件接口，扩展了通用插件接口IPlugin
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)">
            <summary>
            在会话断开时触发
            </summary>
            <param name="client">发生断开的串口会话对象</param>
            <param name="e">断开事件的参数</param>
            <returns>一个任务对象，表示异步操作</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialClosingPlugin">
            <summary>
            定义串口关闭时的插件接口，继承自通用插件接口IPlugin
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)">
            <summary>
            即将断开连接(仅主动断开时有效)。
            </summary>
            <param name="client">串口会话客户端</param>
            <param name="e">关闭事件参数</param>
            <returns>异步任务</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialConnectedPlugin">
            <summary>
            定义一个接口，用于表示与串行端口连接的插件
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)">
            <summary>
            当串行端口会话建立连接时调用的方法。
            </summary>
            <param name="client">建立连接的串行端口会话客户端。</param>
            <param name="e">连接事件的参数。</param>
            <returns>一个Task对象，表示异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialConnectingPlugin">
            <summary>
            定义一个串行连接建立前的操作接口
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)">
            <summary>
            在串行连接建立之前触发的事件处理程序
            此方法允许在实际连接建立之前执行一些操作，比如数据验证或预处理
            </summary>
            <param name="client">串行会话客户端，表示与之通信的物理或虚拟串行端口</param>
            <param name="e">连接事件参数，包含有关连接事件的额外信息</param>
            <returns>异步任务，表示事件处理的异步操作</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialReceivedPlugin">
            <summary>
            定义串行数据接收插件的接口。
            继承自IPlugin接口，特定于串行端口数据接收操作。
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)">
            <summary>
            当串行端口接收到数据时触发的异步事件处理方法。
            </summary>
            <param name="client">触发数据接收事件的串行端口会话对象。</param>
            <param name="e">包含接收数据事件相关信息的事件参数对象。</param>
            <returns>一个Task对象，标识异步操作的完成。</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialReceivingPlugin">
            <summary>
            定义了串行接收插件的接口。
            继承自通用插件接口IPlugin，专门用于处理串行端口接收操作。
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)">
            <summary>
            当串行端口接收到数据时触发的异步事件处理方法。
            </summary>
            <param name="client">触发事件的串行端口会话对象。</param>
            <param name="e">包含接收数据的事件参数对象。</param>
            <returns>一个Task对象，代表异步操作的结果。</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts.ISerialSendingPlugin">
            <summary>
            串行发送插件接口，继承自通用插件接口IPlugin
            </summary>
        </member>
        <member name="M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)">
            <summary>
            在串行数据发送前触发的事件处理程序
            </summary>
            <param name="client">串行端口会话客户端</param>
            <param name="e">发送事件参数</param>
            <returns>异步任务</returns>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialClosedPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialClosedPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosedPluginExtensions.AddSerialClosedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosedPluginExtensions.AddSerialClosedPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosedPluginExtensions.AddSerialClosedPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosedPluginExtensions.AddSerialClosedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.ClosedEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosedPluginExtensions.AddSerialClosedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosedPluginExtensions.AddSerialClosedPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosedPlugin.OnSerialClosed(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosedEventArgs)"/>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialClosingPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialClosingPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosingPluginExtensions.AddSerialClosingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosingPluginExtensions.AddSerialClosingPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosingPluginExtensions.AddSerialClosingPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosingPluginExtensions.AddSerialClosingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.ClosingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosingPluginExtensions.AddSerialClosingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialClosingPluginExtensions.AddSerialClosingPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialClosingPlugin.OnSerialClosing(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ClosingEventArgs)"/>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialConnectedPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialConnectedPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectedPluginExtensions.AddSerialConnectedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectedPluginExtensions.AddSerialConnectedPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectedPluginExtensions.AddSerialConnectedPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectedPluginExtensions.AddSerialConnectedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.ConnectedEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectedPluginExtensions.AddSerialConnectedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectedPluginExtensions.AddSerialConnectedPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectedPlugin.OnSerialConnected(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectedEventArgs)"/>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialConnectingPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialConnectingPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectingPluginExtensions.AddSerialConnectingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectingPluginExtensions.AddSerialConnectingPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectingPluginExtensions.AddSerialConnectingPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectingPluginExtensions.AddSerialConnectingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.ConnectingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectingPluginExtensions.AddSerialConnectingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialConnectingPluginExtensions.AddSerialConnectingPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialConnectingPlugin.OnSerialConnecting(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ConnectingEventArgs)"/>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialReceivedPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialReceivedPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivedPluginExtensions.AddSerialReceivedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivedPluginExtensions.AddSerialReceivedPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivedPluginExtensions.AddSerialReceivedPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivedPluginExtensions.AddSerialReceivedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.ReceivedDataEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivedPluginExtensions.AddSerialReceivedPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivedPluginExtensions.AddSerialReceivedPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivedPlugin.OnSerialReceived(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ReceivedDataEventArgs)"/>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialReceivingPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialReceivingPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivingPluginExtensions.AddSerialReceivingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivingPluginExtensions.AddSerialReceivingPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivingPluginExtensions.AddSerialReceivingPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivingPluginExtensions.AddSerialReceivingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.ByteBlockEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivingPluginExtensions.AddSerialReceivingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialReceivingPluginExtensions.AddSerialReceivingPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialReceivingPlugin.OnSerialReceiving(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.ByteBlockEventArgs)"/>
        </member>
        <member name="T:TouchSocket.SerialPorts._SerialSendingPluginExtensions">
            <inheritdoc cref = "T:TouchSocket.SerialPorts.ISerialSendingPlugin"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialSendingPluginExtensions.AddSerialSendingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialSendingPluginExtensions.AddSerialSendingPlugin(TouchSocket.Core.IPluginManager,System.Action{TouchSocket.SerialPorts.ISerialPortSession})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialSendingPluginExtensions.AddSerialSendingPlugin(TouchSocket.Core.IPluginManager,System.Action)">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialSendingPluginExtensions.AddSerialSendingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.Sockets.SendingEventArgs,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialSendingPluginExtensions.AddSerialSendingPlugin(TouchSocket.Core.IPluginManager,System.Func{TouchSocket.SerialPorts.ISerialPortSession,System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)"/>
        </member>
        <member name="M:TouchSocket.SerialPorts._SerialSendingPluginExtensions.AddSerialSendingPlugin(TouchSocket.Core.IPluginManager,System.Func{System.Threading.Tasks.Task})">
            <inheritdoc cref = "M:TouchSocket.SerialPorts.ISerialSendingPlugin.OnSerialSending(TouchSocket.SerialPorts.ISerialPortSession,TouchSocket.Sockets.SendingEventArgs)"/>
        </member>
        <member name="T:TouchSocket.Core.FastSerializableAttribute">
            <summary>
            标识源生成Fast序列化相关的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.GeneratorPackageAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>的实现。
            </summary>
        </member>
        <member name="T:TouchSocket.Core.PackageMemberAttribute">
            <summary>
            标识源生成<see cref="T:TouchSocket.Core.IPackage"/>成员的特性。
            </summary>
        </member>
        <member name="P:TouchSocket.Core.PackageMemberAttribute.Behavior">
            <summary>
            生成行为。一般来说，对于非只读、非重写、且同时拥有get，set（可以私有）访问器的属性，会自动生成。
            对于字段，均不会自动生成。所以可以使用该设置，来指示生成器的生成行为。
            </summary>
        </member>
        <member name="T:TouchSocket.Sockets.InternalReceiver">
            <summary>
            Receiver
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.#ctor(TouchSocket.Sockets.IReceiverClient{TouchSocket.Sockets.IReceiverResult})">
            <summary>
            Receiver
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.ReadAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.InputReceiveAsync(TouchSocket.Core.ByteBlock,TouchSocket.Core.IRequestInfo)">
            <inheritdoc/>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiver.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TouchSocket.Sockets.InternalReceiverResult">
            <summary>
            ReceiverResult
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiverResult.#ctor(System.Action)">
            <summary>
            ReceiverResult
            </summary>
            <param name="disAction"></param>
        </member>
        <member name="P:TouchSocket.Sockets.InternalReceiverResult.ByteBlock">
            <summary>
            字节块
            </summary>
        </member>
        <member name="P:TouchSocket.Sockets.InternalReceiverResult.RequestInfo">
            <summary>
            数据对象
            </summary>
        </member>
        <member name="M:TouchSocket.Sockets.InternalReceiverResult.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute">
            <summary>
            Indicates that the specified method parameter expects a constant.
            </summary>
            <remarks>
            This can be used to inform tooling that a constant should be used as an argument for the annotated parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Min">
            <summary>
            Indicates the minimum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ConstantExpectedAttribute.Max">
            <summary>
            Indicates the maximum bound of the expected constant, inclusive.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
            Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
            This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
            feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class,
            specifying the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
            Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
            The diagnostic ID is shown in build output for warnings and errors.
            <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
            Gets or sets the URL for corresponding documentation.
            The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.
            </summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>
            Gets the type of the builder to use to construct the collection.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>
            Gets the name of the method on the builder to use to construct the collection.
            </summary>
            <remarks>
            This should match the metadata name of the target method.
            For example, this might be ".ctor" if targeting the type's constructor.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute">
            <summary>
            Specifies the priority of a member in overload resolution. When unspecified, the default priority is 0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute"/> class.
            </summary>
            <param name="priority">The priority of the attributed member. Higher numbers are prioritized, lower numbers are deprioritized. 0 is the default if no attribute is present.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.OverloadResolutionPriorityAttribute.Priority">
            <summary>
            The priority of the member.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ParamCollectionAttribute">
            <summary>
            Indicates that a method will allow a variable number of arguments in its invocation.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiresLocationAttribute">
            <summary>
            Reserved for use by a compiler for tracking metadata.
            This attribute should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
    </members>
</doc>
